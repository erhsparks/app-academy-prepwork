q
display(@grid)
q
y
q
display(@grid)
q
display(@grid)
q
new = Board.default_grid.populate_grid ; display(new)
new = Board.default_grid
new = self.default_grid
display(@grid)
q
display(@grid)
q
rand(0...row_max+1)
rand(0..row_max)
(0..row_max).sample
(0...row_max + 1).each { |i| puts i }
(0..row_max).each { |i| puts i }
(0..row_max).times { |i| puts i }
0...row_max + 1
0..row_max
@grid_width
@grid
@board.grid_length
@board.@grid_length
@grid_length
grid_length
col_max
row_max
s
c
hit?
s
symbols
s
n
c
@board.display(@board.grid)
@board.display(@board)
q
Board::SHIPS.select { |k, v| v.is_a?(Symbol) }
Board::SHIPS.values.flatten.select { |v| v.is_a?(Symbol) }
Board::SHIPS.values
Board::SHIPS
n
@board
@board.display(@board)
@grid.display(@grid)
q
Board::SHIPS
@board::SHIPS
@board:SHIPS
@board.SHIPS
@board
@board::SHIPS
q
display(@grid)
q
display(@grid)
q
display(@grid)
q
display(@grid)
q
display(@grid)
q
display(@grid)
q
display(@grid)
q
display(@grid)
q
display(@grid)
q
display(@grid)
q
display(@grid)
q
display(@grid)
q
display(@grid)
q
display(@grid)
q
display(@grid)
q
display(@grid)
q
display(@grid)
q
display(@grid)
q
display(@grid)
q
display(@grid)
q
display(@grid)
q
display(@grid)
q
display(@grid)
q
display(@grid)
q
display(@grid)
q
display(@grid)
q
display(@grid)
q
display(@grid)
q
display(@grid)
q
display(@grid)
q
display(@grid)
display_grid(@grid)
@grid
q
c
board.display(board.grid)
display(board.grid)
board.grid
grid
c
@board.in_range?([10,10])
q
@board.in_range?([15,15])
@board.in_range?([10,10])
@board.in_range?(pos)
pos
c
q
y
c
pos
display(grid)
c
empty?
display(grid)
c
display(grid)
c
display(grid)
c
display(grid)
c
display(grid)
4,1
c
display(grid)
c
display(grid)
empty?
q
empty?
display(grid)
grid[6][7] = :X
display(grid)
grid[6][6] = :X
grid[6][5] = :X
grid[6][4] = :X
empty?
display(grid)
grid[6][3] = :X
display(grid)
q
empty?
c
empty?
grid
q
row_range
s
ship[:orient]
ship[:size]
ship_size
s
col
row
c
col
row
c
col
row
c
col
row
c
col
row
c
col
row
c
col
row
c
col
row
c
col
row
c
col
row
c
col
row
c
q
empty?
display(grid)
grid[0][0] = :X
display(grid)
empty?
grid[0][0] = :s
empty?
display(grid)
grid
q
empty?
display(grid)
grid
c
q
display(grid)
@grid.each { |row| row.each { |sym| print "false" unless sym == nil || sym == :X } }
@grid.each { |row| row.each { |sym| return false unless sym == nil || sym == :X } }
@grid.empty?
empty?
emtpy?
@grid.emtpy?
@grid
@grid.each { |row| row.each { |sym| return false unless sym == nil || sym == :X } }
@grid.each { |row| row.each { |sym| return false unless sym == nil || sym == :X} } }
@grid.each { |row| row.each { |sym| puts "#{sym == nil || sym == :X}" } }
@grid.each { |row| row.each { |sym| puts "#{sym == nil}" } }
@grid.each { |row| row.each { |sym| sym == nil } }
grid[0][0] == nil
grid[0][0] ?= nil
@grid.each { |row| row.each { |sym| sym ?= nil } }
@grid.each { |row| puts row.to_s }
@grid.each { |row| print row.to_s }
@grid.each do |row|
empty?
display(grid)
c
display(grid)
c
display(grid)
